var imegaCalculator = imegaCalculator || (function($) {

  var baseUrl='https://angus.finance-calculator.co.uk/api/public/';

  var calcData;
  var financeProvider;
  var providerImage;
  var loanAmount;
  var financeOptions;
  var minOrder;
  var maxOrder;
  var widgetTemplate ='';
  var widgetStyle;
  var styleUrl;
  var currency;
  var currencySymbol;
  var styleCss;

  var monthlyText;
  var increaseText;
  var reduceText;
  var headerText;
  var footerText;
  var topText;

  var apiKey;
  var priceElemInner;
  var priceElem;
  var loanAmount;

  var insertMethod;
  var insertElem;
  var productName;
  var financeFilter;
  var anchorMargin;
  var anchorWidth;
  var infoButtonText;
  var hideIfNotInRange;
  var inlineSelector;
  var pageType;

  var monthlyAmountSet;
  var currentDeposit;
  var anchorDiv;
  var apiResponse;
  var onFinanceStatus;

  var shouldClearCalc;
  var timeout = 0;


  return {
    init: function(options){
      try {
        initOptions(options);
        run();
      } catch (error) {
        console.warn('Imegamedia Finance Calculator  : Initialization Error  : '+error.message);
      }
    },
    apiResponse: function(){
      return apiResponse;
    }

  }

  function run(){
    timeout++;
    if(timeout>180){
      getFinanceOptions();
      return;
    }
    if(priceElemInner){
      if(!$(priceElemInner).length){
        window.requestAnimationFrame(run);

      } else {
        var newLoanAmount = Number($(priceElemInner).first().text().replace(/[^0-9\.-]+/g,""));
        if(!newLoanAmount>0){
          getFinanceOptions();
        } else {
          loanAmount = newLoanAmount;
          getFinanceOptions();
        }
      }
    } else if(priceElem) {
      if(!$(priceElem).length){
        window.requestAnimationFrame(run);
      } else {
        var newLoanAmount = Number($(priceElem).first().text().replace(/[^0-9\.-]+/g,""));
        if(!newLoanAmount>0){
          getFinanceOptions();
        } else {
          loanAmount = newLoanAmount;
          getFinanceOptions();
        }
      }
    } else {
      getFinanceOptions();
    }
  }

  function initOptions(options){
    loanAmount = options.amount ? options.amount : 0;
    insertElem = options.element;

    if (!options.apiKey){
      throw new Error('API key not set');
    }
    apiKey = options.apiKey;

    if(!options.insertion){
      throw new Error('Insert method not set');
    }
    insertMethod = options.insertion;
    financeFilter = options.financeFilter ? options.financeFilter : false;
    productName = options.description ? options.description : '';
    priceElem = options.priceElement ? options.priceElement : false;
    priceElemInner = options.priceElementInner ? options.priceElementInner : false;
    if(priceElem){
      if($(priceElem).length<1){
        console.warn('Imegamedia Finance Calculator : priceElem selects 0 elements');
        priceElem = false;
      }
    }
    anchorMargin = options.margin ? options.margin : false;
    anchorWidth = options.width ? options.width : false;
    hideIfNotInRange = options.hideIfNotInRange ? true : false;
    inlineSelector = options.inlineSelector ? options.inlineSelector : false;
    inlineInsertMethod = options.inlineInsertMethod ? options.inlineInsertMethod : false;
    infoButtonText = options.buttonText ? options.buttonText : 'More Info';
    pageType = options.page ? options.page : false;
    baseUrl = options.api ? options.api : baseUrl;
    onFinanceStatus = options.onFinanceStatus ? options.onFinanceStatus : false;
    shouldClearCalc = typeof options.shouldClearCalc !== 'undefined' ? options.shouldClearCalc : true;
  }

  function insertAnchor(){
    anchorDiv = '<div id="imega-widget-anchor"';
    if(anchorMargin || anchorWidth){
      anchorDiv+=' style="';
      if(anchorMargin){
        anchorDiv+='margin:'+anchorMargin+';';
      }
      if (anchorWidth){
        anchorDiv+='width:'+anchorWidth+';';
      }
    }
    anchorDiv+='"></div>';

    injectHtml(insertMethod, anchorDiv, insertElem);
  }

  function injectHtml(method, content, elem){
    switch(method){
      case 'before' :
      $(elem).before(content);
      break;
      case 'after'  :
      $(elem).after(content);
      break;
      case 'append' :
      $(elem).append(content);
      break;
      case 'prepend' :
      $(elem).prepend(content);
      break;
      default :
      $(elem).html(content);
    }
  }

  function getFinanceOptions(){
    var requestData = {};
    requestData.loan_amount = loanAmount;
    requestData.api_key = apiKey;
    if(productName){
      requestData.product_name = productName;
    }
    if(financeFilter){
      requestData.finance_filter = financeFilter;
    }
    if(pageType){
      requestData.page = pageType;
    }
    $.ajax({
      url: baseUrl+'finance-options',
      data: requestData
    }).done( function (data, statusText, xhr){
      try{
        apiResponse = {data:data,text:statusText,xhr:xhr};
        statusCallback(data);
        if(data.finance_available===true){
          clearCalc();
          setVars(data);
          insertAnchor();
          linkStylesheet();
          setTemplate(widgetStyle);
          setCss();
          populateOptions(financeOptions);
          setMonthlyAmount();
          populateDepositAmounts(financeOptions[0]);
          getFinanceCalculator(financeOptions[0]);
          setListeners();


        } else {
          if (data.no_finance_reason==='out_of_bounds'){
            clearCalc();
            if(hideIfNotInRange){
              return;
            }
            styleUrl = data.style_url;
            styleCss = data.style_css;
            linkStylesheet();
            setCss();
            providerImage = data.header_img;
            var anchorHtml ='<div class="imega-anchor-top"><img src="'+providerImage+'"></div><div class="imega-anchor-bottom"><span class="imega-slug">'+data.monthly_text+'</span></div></div>';
            insertAnchor();
            $('#imega-widget-anchor').html(anchorHtml);
          } else if(data.no_finance_reason==='no_keyword_match'){
            throw new Error('No finance available - no matching keywords');
          } else if(data.no_finance_reason==='no_codes'){
            throw new Error('No finance options available');
          } else{
            throw new Error('Unexpected error');
          }
          setListeners();
        }
      } catch (error) {
        console.warn('Imegamedia Finance Calculator  : '+error.message);
      }
    }).fail(function (xhr, statusText, error){
      apiResponse = {data:error,text:statusText,xhr:xhr};
    });

  }

  function statusCallback(data){
    if(onFinanceStatus){
      var statusData =
      {
        finance_available: data.finance_available,
        loan_amount: data.loan_amount
      }
      onFinanceStatus(statusData);
    }
  }

  function clearCalc(){
    if(shouldClearCalc){
      $('#imega-widget-anchor').remove();
      $('#imega-widget').remove();
    }
  }

  function setVars(data){
    loanAmount=parseFloat(data.loan_amount);
    financeProvider=data['finance_provider'];
    calcData = data;
    minOrder=data['min_max'].min_order;
    maxOrder=data['min_max'].max_order;
    widgetStyle = data.widget_style;
    styleUrl = data.style_url;
    financeOptions=data['finance_options'];
    providerImage=data['widget_options'].header_img;
    monthlyText =data['widget_options'].monthly_text;
    increaseTextdata=data['widget_options'].increase_text;
    reduceTextdata=data['widget_options'].reduce_text;
    headerText=data['widget_options'].header_text;
    footerText=data['widget_options'].footer_text;
    topText=data['widget_options'].top_text;
    currency = data['currency'];
    styleCss = data['widget_options'].style_css;
    switch(currency){
      case 'GBP' :
      currencySymbol ='&pound';
      break;

      case 'USD' :
      currencySymbol = '&dollar';
      break;

      default :
      currencySymbol = '&pound';
    }

  }

  function populateOptions(financeOptions){
    $('#imega-widget #options-select').html('');
    $.each(financeOptions, function(k,v){
      $('#imega-widget #options-select').append('<option value="'+k+'" data-fcode="'+v.finance_code+'">'+v.name+'</option>');
    });
  };

  function populateDepositAmounts(financeOption){

    $('#imega-widget #imega-deposit-amount-td').html('');

    var depositOptions=financeOption.deposit_options;
    var deposithtml = '';

    if(depositOptions.length>1){
      deposithtml+='<select id="imega-deposit-amount-select">';
      $.each(depositOptions, function(k,v){
        deposithtml+='<option value="'+v.value+'"';
        if(currentDeposit || currentDeposit===0){
          if(currentDeposit == v.value){
            deposithtml+=' selected="selected"';
          }
        } else if(v.value*100==Math.round(financeOption.default_deposit/10)*10) {
          deposithtml+=' selected="selected"';
        }
        deposithtml+='>'+v.name+'</option>';
      });
      deposithtml+='</select>';
      $('#imega-widget #imega-deposit-amount-td').append(deposithtml);
      currentDeposit = parseFloat($('#imega-widget #imega-deposit-amount-select').val());
    } else {
      deposithtml+='<span id="imega-deposit-amount-select">'+depositOptions[0].name+'</span>';
      currentDeposit=parseFloat(depositOptions[0].value);
      $('#imega-widget #imega-deposit-amount-td').append(deposithtml);
    }



  }

  function setListeners(){
    $('#imega-widget-anchor').on('click', '#imega-see-info', function(e){
      if(inlineSelector){return;}
      e.preventDefault();
      $('#imega-page-mask').show();
      $('#imega-modal').show();
    });

    $('body').on('click', '#imega-close-btn, #imega-page-mask', function(e){
      e.preventDefault();
      $('#imega-page-mask').hide();
      $('#imega-modal').hide();
    });

    $('#imega-widget').on('change','#options-select, #imega-deposit-amount-select', function(){
      currentDeposit = parseFloat($('#imega-deposit-amount-select').val());
      financeOptionsIndex = $('#options-select').val();
      populateDepositAmounts(financeOptions[financeOptionsIndex]);
      getFinanceCalculator(financeOptions[financeOptionsIndex]);
    });


    (function(){
      var priceObserver = new MutationObserver(function(mutations) {
        var changeElem = priceElemInner ? priceElemInner : priceElem;
        if($(changeElem).text()){
          var newAmount = Number($(changeElem).first().text().replace(/[^0-9\.-]+/g,""));
          if (!isNaN(newAmount)){
            if (newAmount!=loanAmount && parseInt(newAmount)>0){
              loanAmount = newAmount;
              getFinanceOptions();
            }
          } else{
            console.warn('Imegamedia Finance Calculator  : No price text found in price element');
          }
        }
      });
      var config = { attributes: true, childList: true, subtree: true, characterData: true};
      priceObserver.observe($(priceElem)[0], config);
    })();
  }

  function getFinanceCalculator(financeOption){
    var purchasePrice = parseFloat(loanAmount);
    var depositFactor = currentDeposit;
    var loadFactor = parseFloat(financeOption['imega_finance_rate'].load_factor);
    var term = parseInt(financeOption['imega_finance_rate'].term);
    var apr = parseFloat(financeOption['imega_finance_rate'].apr);
    var deferralTerm = parseFloat(financeOption['imega_finance_rate'].deferral_term);
    var settlementFee = parseFloat(financeOption['imega_finance_rate'].settlement_fee);
    var processingFee = parseFloat(financeOption['imega_finance_rate'].processing_fee);
    var interestRate = apr;

    var customField1 = financeOption['imega_finance_rate'].custom_1;
    var customField2 = financeOption['imega_finance_rate'].custom_2;
    var customField3 = financeOption['imega_finance_rate'].custom_3;

    var interestRatePercent = roundPrice(interestRate * 100);
    var depositPercentage = depositFactor*100;
    var depositAmount;
    var creditAmount;
    var installmentAmount;
    var repaymentAmount;
    var totalRepaymentAmount;
    var bnplTotal;
    var interestAmount;
    var calcProcessingFee;

    switch(financeProvider){

      case 'deko' :
      purchasePrice = purchasePrice * 100;
      depositAmount = Math.round(purchasePrice * depositFactor);
      creditAmount = (purchasePrice - depositAmount - (settlementFee*100));
      installmentAmount = Math.round(creditAmount * loadFactor);
      repaymentAmount = installmentAmount*term;
      totalRepaymentAmount = apr==0 ? purchasePrice : repaymentAmount+depositAmount;
      interestAmount = repaymentAmount - creditAmount;

      purchasePrice = (purchasePrice/100).toFixed(2);
      depositAmount = (Math.ceil(depositAmount) / 100).toFixed(2);
      creditAmount = (creditAmount/100).toFixed(2);
      installmentAmount = Math.round(installmentAmount)/100;
      repaymentAmount = (repaymentAmount/100).toFixed(2);
      totalRepaymentAmount = (totalRepaymentAmount/100).toFixed(2);
      interestAmount = interestAmount<0 ? 0 : (interestAmount/100).toFixed(2);
      break;

      case'duologi' :
      purchasePrice = purchasePrice;
      depositAmount = Math.round(depositFactor*purchasePrice);
      creditAmount = Math.round(purchasePrice - depositAmount - settlementFee);
      installmentAmount = roundPriceDown(creditAmount * loadFactor);
      repaymentAmount = installmentAmount*term;
      totalRepaymentAmount = apr==0 ? Math.floor(purchasePrice) : Math.round(roundPriceDown(repaymentAmount+depositAmount));
      interestAmount = Math.round(repaymentAmount - creditAmount);
      bnplTotal = roundPrice(purchasePrice+settlementFee);
      settlementFee = settlementFee.toFixed(2);
      break;

      case 'v12' :
      depositAmount = depositFactor*purchasePrice;
      creditAmount =  purchasePrice-depositAmount;
      installmentAmount = roundPrice(creditAmount*loadFactor);

      calcProcessingFee = roundPrice(processingFee*creditAmount);
      repaymentAmount = parseFloat(installmentAmount)*parseFloat(term)+parseFloat(calcProcessingFee);
      totalRepaymentAmount = apr==0 ? purchasePrice : parseFloat(repaymentAmount)+parseFloat(depositAmount);
      interestAmount = repaymentAmount - creditAmount;
      interestRate = (((interestAmount / creditAmount) * 100) / (term / 12));
      interestRate = interestRate<0.1 ? 0 : interestRate;
      interestRate = interestRate.toFixed(2);


      calcProcessingFee = roundPrice(processingFee*creditAmount);
      purchasePrice = roundPrice(purchasePrice);
      depositAmount=roundPriceUp(depositAmount);
      creditAmount = roundPriceDown(creditAmount);
      repaymentAmount=roundPrice(repaymentAmount);
      totalRepaymentAmount=roundPrice(totalRepaymentAmount);
      bnplTotal = roundPrice(parseFloat(creditAmount)+parseFloat(settlementFee));
      interestAmount = roundPrice(totalRepaymentAmount-purchasePrice);

      break;

      case 'snapuk' :
      depositAmount = depositFactor*purchasePrice;
      creditAmount =  purchasePrice-depositAmount;
      installmentAmount = creditAmount*loadFactor;
      repaymentAmount = installmentAmount*term;
      totalRepaymentAmount = apr==0 ? purchasePrice : repaymentAmount+depositAmount+processingFee;
      interestAmount = repaymentAmount - creditAmount;

      installmentAmount = roundPriceUp(installmentAmount);
      purchasePrice = roundPrice(purchasePrice);
      depositAmount=roundPriceUp(depositAmount);
      creditAmount = roundPriceDown(creditAmount);
      repaymentAmount=roundPrice(repaymentAmount);
      totalRepaymentAmount=roundPrice(totalRepaymentAmount);
      bnplTotal = roundPrice(parseFloat(creditAmount)+parseFloat(settlementFee));
      interestAmount = roundPrice(totalRepaymentAmount-purchasePrice);
      processingFee = roundPrice(processingFee);
      break;

      default :
      depositAmount = depositFactor*purchasePrice;
      creditAmount =  purchasePrice-depositAmount;
      installmentAmount = creditAmount*loadFactor;
      repaymentAmount = installmentAmount*term;
      totalRepaymentAmount = apr==0 ? purchasePrice : repaymentAmount+depositAmount;
      interestAmount = repaymentAmount - creditAmount;

      installmentAmount = roundPriceDown(installmentAmount);
      purchasePrice = roundPrice(purchasePrice);
      depositAmount=roundPriceUp(depositAmount);
      creditAmount = roundPriceDown(creditAmount);
      repaymentAmount=roundPrice(repaymentAmount);
      totalRepaymentAmount=roundPrice(totalRepaymentAmount);
      bnplTotal = roundPrice(parseFloat(creditAmount)+parseFloat(settlementFee));
      interestAmount = roundPrice(totalRepaymentAmount-purchasePrice);
      processingFee = roundPrice(processingFee);
      break;

    }

    $('#calc-table-data').html('');

    if(financeOption['imega_finance_rate'].rate_type==1 || financeOption['imega_finance_rate'].rate_type==1){
      $('#bnpl-text').html('');
      $.each (calcData['widget_options']['calculator_fields'], function(key, value){
        switch(value.calculator_fields_alias){
          case 'purchase-price' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+roundPrice(loanAmount)+'</td></tr>').fadeIn('slow');
          break;
          case 'deposit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+depositAmount+'</td></tr>').fadeIn();
          break;
          case 'credit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+creditAmount+'</td></tr>').fadeIn();
          break;
          case 'installment-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+installmentAmount+'</td></tr>').fadeIn();
          break;
          case 'interest-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+interestAmount+'</td></tr>').fadeIn();
          break;
          case 'term' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+term+'</td></tr>').fadeIn();
          break;
          case 'interest-rate' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+interestRate+'%</td></tr>').fadeIn();
          break;
          case 'apr' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+apr+'%</td></tr>').fadeIn();
          break;
          case 'total-payable' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+totalRepaymentAmount+'</td></tr>').fadeIn();
          break;
          case 'processing-fee' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+processingFee+'</td></tr>').fadeIn();
          break;
          case 'custom-1' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+customField1+'</td></tr>').fadeIn();
          break;
          case 'custom-2' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+customField2+'</td></tr>').fadeIn();
          break;
          case 'custom-3' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+customField3+'</td></tr>').fadeIn();
          break;
        }
      });
    } else if(financeOption['imega_finance_rate'].rate_type==2){
      $.each (calcData['widget_options']['calculator_fields'], function(key, value){
        switch(value.calculator_fields_alias){
          case 'purchase-price' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+roundPrice(loanAmount)+'</td></tr>').fadeIn('slow');
          break;
          case 'deposit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+depositAmount+'</td></tr>').fadeIn();
          break;
          case 'credit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+creditAmount+'</td></tr>').fadeIn();
          break;
          case 'defer-term' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+deferralTerm+' Months</td></tr>').fadeIn('slow');
          break;
          case 'settlement-fee' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+settlementFee+'</td></tr>').fadeIn('slow');
          break;
          case 'bnpl-total' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+bnplTotal+'</td></tr>').fadeIn('slow');
          break;
          case 'processing-fee' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+processingFee+'</td></tr>').fadeIn();
          break;
        }
      });
      $('#bnpl-text').html('<p>Buy Now Pay Later means buy now and pay the total repayable amount in full within the agreed term and you will be charged absolutely no interest. <strong>Should the balance not be paid in full by the end of the agreed term you will automatically enter into a loan agreement with '+term+' equal payments with a representative APR of '+apr+'%</strong>. If you settle earlier than '+term+' months you will only pay the interest accrued over the number of months you have been paying the loan.</p>');
    } else if(financeOption['imega_finance_rate'].rate_type==3){
      $('#bnpl-text').html('');
      $.each (calcData['widget_options']['calculator_fields'], function(key, value){
        switch(value.calculator_fields_alias){
          case 'purchase-price' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+roundPrice(loanAmount)+'</td></tr>').fadeIn('slow');
          break;
          case 'deposit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+depositAmount+'</td></tr>').fadeIn();
          break;
          case 'credit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+creditAmount+'</td></tr>').fadeIn();
          break;
          case 'installment-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+installmentAmount+'</td></tr>').fadeIn();
          break;
          case 'interest-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+interestAmount+'</td></tr>').fadeIn();
          break;
          case 'term' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+term+'</td></tr>').fadeIn();
          break;
          case 'interest-rate' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+interestRate+'%</td></tr>').fadeIn();
          break;
          case 'apr' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+apr+'%</td></tr>').fadeIn();
          break;
          case 'total-payable' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+totalRepaymentAmount+'</td></tr>').fadeIn();
          break;
          case 'calc-processing-fee' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+calcProcessingFee+'</td></tr>').fadeIn();
          break;
        }
      });
    } else if(financeOption['imega_finance_rate'].rate_type==4){
      $('#bnpl-text').html('');
      $.each (calcData['widget_options']['calculator_fields'], function(key, value){
        switch(value.calculator_fields_alias){
          case 'purchase-price' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+roundPrice(loanAmount)+'</td></tr>').fadeIn('slow');
          break;
          case 'deposit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+depositAmount+'</td></tr>').fadeIn();
          break;
          case 'credit-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+creditAmount+'</td></tr>').fadeIn();
          break;
          case 'installment-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+installmentAmount+'</td></tr>').fadeIn();
          break;
          case 'interest-amount' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+interestAmount+'</td></tr>').fadeIn();
          break;
          case 'term' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+term+'</td></tr>').fadeIn();
          break;
          case 'defer-term' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+deferralTerm+' Months</td></tr>').fadeIn('slow');
          break;
          case 'interest-rate' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+interestRate+'%</td></tr>').fadeIn();
          break;
          case 'apr' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+apr+'%</td></tr>').fadeIn();
          break;
          case 'total-payable' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+totalRepaymentAmount+'</td></tr>').fadeIn();
          break;
          case 'calc-processing-fee' :
          $('#calc-table-data').append('<tr><th>'+value.name+'</th><td data-imega-calculator-field='+value.calculator_fields_alias+'>'+currencySymbol+calcProcessingFee+'</td></tr>').fadeIn();
          break;
        }
      });
    } else if(financeOption['imega_finance_rate'].rate_type==5){ //Snap show fixed £500
      $('#bnpl-text').html('');
      $('#calc-table-data').append('<tr><th>Amount of Credit / Cost of Goods</th><td>£500</td><tr>');
      $('#calc-table-data').append('<tr><th>Annual Interest Rate</th><td>98.55%</td><tr>');
      $('#calc-table-data').append('<tr><th>Weekly Payment</th><td>£15.19</td><tr>');
      $('#calc-table-data').append('<tr><th>Total Payable</th><td>£789.45</td><tr>');
      $('#calc-table-data').append('<tr><th>Number of Payments</th><td>52</td><tr>');
      $('#calc-table-data').append('<tr><th>Representative APR</th><td>164.7%</td><tr>');
    }
  }

  function roundPrice(value) {
    return Number(Math.round(value+'e'+2)+'e-'+2).toFixed(2);
  }
  function roundPriceUp(value) {
    return Number(Math.ceil(value+'e'+2)+'e-'+2).toFixed(2);
  }
  function roundPriceDown(value) {
    return Number(Math.floor(value+'e'+2)+'e-'+2).toFixed(2);
  }

  function setMonthlyAmount(){
    var monthlyAmount;
    financeOptions.forEach(function(option){
      option.real_max_deposit = getRealMaxDeposit(option);
    });
    var financeOption = financeOptions.reduce(function(prev, current) {
      return (((1-prev.real_max_deposit)*prev['imega_finance_rate'].load_factor) < ((1-current.real_max_deposit)*current['imega_finance_rate'].load_factor)) ? prev : current;
    });
    switch(financeProvider){
      case 'snapuk' :
      monthlyAmount = currencySymbol+roundPriceUp((loanAmount-(financeOption.real_max_deposit*loanAmount))*financeOption['imega_finance_rate'].load_factor);
      break;

      default :
      monthlyAmount = currencySymbol+roundPriceDown((loanAmount-(financeOption.real_max_deposit*loanAmount))*financeOption['imega_finance_rate'].load_factor);
    }
    $('.imega-min-payment-text').html(monthlyAmount);
    $('.imega-loan-amount-text').html(loanAmount.toFixed(2));
  }

  function getRealMaxDeposit(financeOption){
    deposits = financeOption.deposit_options;
    depositAmounts = [];
    deposits.forEach(function(deposit){
      depositAmounts.push(deposit.value);
    });
    return Math.max.apply(Math, depositAmounts);
  }

  function linkStylesheet(){
    $('head').append('<link rel="stylesheet" href="'+styleUrl+'" type="text/css">');
  }

  function setTemplate(style){
    anchorTemplate='<div class="imega-anchor-top"><img src="'+providerImage+'">';
    anchorTemplate+= !inlineSelector ? '<a href="#" ' : '<a href="'+inlineSelector+'" ';
    anchorTemplate+='id="imega-see-info" class="imega-see-info-btn">'+infoButtonText+'</a></div>';
    anchorTemplate+='<div class="imega-anchor-bottom"><span class="imega-slug">'+monthlyText+'</span></div>';

    widgetTemplate+='<div id="imega-widget">';
    widgetTemplate+='<div id="imega-page-mask"></div>';
    widgetTemplate+='<div id="imega-modal">';
    widgetTemplate+= !inlineSelector ? '<a href="#" id="imega-close-btn">&times;</a>' : '';
    widgetTemplate+='<div id="imega-modal-head">';
    widgetTemplate+='<img src="'+providerImage+'">';
    widgetTemplate+='<p>'+headerText+'</p>';
    widgetTemplate+='</div>';
    widgetTemplate+='<div class="imega-modal-body">';
    widgetTemplate+='<h3>'+topText+'</h3>';
    widgetTemplate+='<table id="calc-table">';
    widgetTemplate+='<tr>';
    widgetTemplate+='<th>Finance Option</th>';
    widgetTemplate+='<td><select id="options-select"></select></td>';
    widgetTemplate+='</tr>';
    widgetTemplate+='<tr>';
    widgetTemplate+='<th>Deposit Amount</th>';
    widgetTemplate+='<td id="imega-deposit-amount-td">';
    widgetTemplate+='</td>';
    widgetTemplate+='<tbody id="calc-table-data"></tbody>';
    widgetTemplate+='</tr>';
    widgetTemplate+='</table>';
    widgetTemplate+='<div id="bnpl-text"></div>';
    widgetTemplate+='<p class="imega-widget-info-small">'+footerText+'</p>';
    widgetTemplate+='</div>';
    widgetTemplate+='</div>';
    widgetTemplate+='</div>';

    $('#imega-widget-anchor').html(anchorTemplate);
    if(inlineSelector){
      injectHtml(inlineInsertMethod, widgetTemplate, inlineSelector);
    }else{
      $('body').append(widgetTemplate);
    }
  }

  function setCss(){
    $('head').append('<style>'+styleCss+'</style>');
  }

})(jQuery);
