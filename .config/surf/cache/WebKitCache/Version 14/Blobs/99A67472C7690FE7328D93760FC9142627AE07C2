$(document).ready(function(){
    showFBT();

    $(document).on('click', '.themvale-fbt-toggle-options', function() {
        if ($(this).next().is(':visible') == false) {
            $(this).next().slideDown();
        } else {
            $(this).next().slideUp();
        }
    });

    $(document).on('change', '.themvale-fbt-detail-checkbox', function(event) {
        var id = $(this).attr('id').replace('fbt_product', '');
        if ($(this).is(':checked') == false) {
            $('.themvale-fbt-image-item[data-product-id="' + id + '"]').removeClass('isChecked');
            $('.themvale-fbt-product-item[data-product-id="' + id + '"]').removeClass('isChecked');
            $(this).parents('form').find('.themvale-fbt-detail-options').slideUp();
        } else {
            $('.themvale-fbt-image-item[data-product-id="' + id + '"]').addClass('isChecked');
            $('.themvale-fbt-product-item[data-product-id="' + id + '"]').addClass('isChecked');
        }
        const $checkbox = $(event.target);
        var slide = $( ".themvale-fbt-detail-checkbox" ).index( $checkbox );
        $('.themvale-fbt-image-list').trigger('to.owl.carousel', slide );
        totalPrice();
    });

    $(document).on('click', '#themvale-fbt-addAll', function(event) {
        const $form = $('form', $('#halo-fbt'));
        var arrPro = new Array();
        $('.themvale-fbt-detail-checkbox').each(function(i, val) {
            if ($(val).is(':checked')) {
                arrPro.push(i);
            }
        });

        var check = false;

        if (arrPro.length > 0) {
            check = checkProduct($form, arrPro);
        }

        if (check) {
            if (arrPro.length > 0) {
                $('#halo-fbt .loadingOverlay').show();
                addToCart($form, 0, arrPro);
            }
        } else {
            alert('Please make sure all options have been filled in.');
        }

        event.preventDefault();
    });
});

function showFBT(){
    
    
    
	if ($('.DetailRow.fbt-product').length > 0) {
        // change option ID
        $('.themvale-fbt-detail-options input[type="radio"]').each(function(){
            var option_id = $(this).attr('id');
            $(this).attr('id', 'fbt_' + option_id);
            $(this).parents('label').attr('for', 'fbt_' + option_id);
        });

        var num = 0;
        var list = [];

        $('.DetailRow.fbt-product .Value').each(function(i) {
            list.push( {i:i, data: ""} );
            if (!isNaN(Number($(this).text().trim()))) {
                var productId = Number($(this).text());
                
                getById(productId, {}, (err, response) => {
                    if (err) {
                        return '';
                    }
                    
                    list.forEach(function(element) {
                        if(element.i == i){
                            element.data = response.content;
                            element.id = productId;
                        }
                    });
                    num++;
                    if(num == $('.DetailRow.fbt-product .Value').length)
                        showList(list);
                });
            }
        });
    } else {
        $('#halo-fbt').remove();
    }
}

function showList(list){
    var script = '';
    list.forEach(function(element) {
        var pId = element.id;
        var data = element.data;
        var response = $(data).not('script');
        var img = response.find('#QuickViewImage');
        img.find('a').addClass('themvale-fbt-image-link');
        var isChecked = "isChecked";
        if(response.find('.CurrentlySoldOut').length )
            isChecked = "";
        var image = '<div class="themvale-fbt-image-item item '+isChecked+'" data-product-id="'+pId+'">' + img.html() + '</div>';
        $('#halo-fbt .themvale-fbt-image-list').append(image);

        var item = '<div class="themvale-fbt-product-item '+isChecked+'" data-product-id="'+pId+'">\
<form method="post" action="/cart.php" enctype="multipart/form-data">\
<input type="hidden" name="action" value="add">\
<input type="hidden" name="product_id" value="'+pId+'">\
<input type="hidden" name="qty[]" value="1">\
<div class="themvale-fbt-detail-field">\
<input class="themvale-fbt-detail-checkbox form-checkbox" type="checkbox" id="fbt_product'+pId+'" '+( isChecked == "" ? "disabled" : "checked")+'>\
<label class="themvale-fbt-detail-label form-label" for="fbt_product'+pId+'">\
<span class="themvale-fbt-detail-name">'+ response.find('#QuickViewProductDetails h1').html()+'</span><span class="p-price Value">'+ response.find('#QuickViewProductDetails .DetailRow.PriceRow.p-price .Value').html() +'</span></label>\
</div>\
</form>\
</div>';
        $('#halo-fbt .themvale-fbt-product-list').append(item);

        if (response.find('.productAttributeRow').length > 0) {
            var options = response.find('.productAttributeRow').parent().html();
            $('#halo-fbt .themvale-fbt-product-list .themvale-fbt-product-item[data-product-id="' + pId + '"] form').append('<div class="themvale-fbt-toggle-options">Choose Options</div><div class="themvale-fbt-detail-options" data-fbt-option-change>' + options + '</div>');
        }
    });
    

    $('#halo-fbt').show();
    productOptions();
    if (($(window).width() <= 1024)) {
        $('#halo-fbt .themvale-fbt-product-list').append('<div class="themvale-fbt-image-item fbt__total">\
          <p class="themevale-text-price">Total Price: <span class="themvale-fbt-total-price" id="themvale-fbt-totalPrice"></span></p>\
          <a class="btn themvale-fbt-total-button" id="themvale-fbt-addAll" href="#">Add all to Cart</a>\
        </div>');
        
    } else {
        $('#halo-fbt').append('<div class="themvale-fbt-image-item fbt__total">\
          <p class="themevale-text-price">Total Price: <span class="themvale-fbt-total-price" id="themvale-fbt-totalPrice"></span></p>\
          <a class="btn themvale-fbt-total-button" id="themvale-fbt-addAll" href="#">Add all to Cart</a>\
        </div>');
    }
    slick_mobile();
    totalPrice();
}

function slick_mobile() {
    $('.themvale-fbt-image-list').owlCarousel({
            navigation: !0,
            navigationText: !1,
            pagination: !1,
            nav: !0,
            items: 5,
            itemsDesktop: [1199, 5],
            itemsDesktopSmall: [979, 4],
            itemsTablet: [768, 3],
            itemsTabletSmall: [540, 2],
            itemsMobile: [360, 2]
        });
}

function totalPrice() {
    var total = 0;
    var pos = 0;
    var symbol = "$";
    $('.themvale-fbt-product-item.isChecked').each(function(i, val) {
        if ($(val).find('.p-price.Value .ProductDetailsPriceIncTax').length)
            var currency = $(val).find('.ProductPrice.VariationProductPrice .ProductDetailsPriceIncTax').text();
        else
            var currency = $(val).find('.ProductPrice.VariationProductPrice').text();
        var price = parseFloat(currency.replace(/[^0-9.-]+/g, ""));
        var s = currency.replace(parseFloat(price).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ","), "").replace(' (inc VAT)','').replace(' (exc VAT)','');
        if (isNaN(parseFloat(s.replace(/[^0-9.-]+/g, ""))))
            symbol = s;
        if (currency.indexOf(symbol) != -1)
            pos = currency.indexOf(symbol);
        total = total + price;
    });
    total = parseFloat(total).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    if (pos == 0)
        total = symbol + total;
    else
        total = total + symbol;
    $('#themvale-fbt-totalPrice').html(total);
}

function checkProduct(form, arrPro) {
    var check = true;

    for (var i = 0; i < arrPro.length; i++) {
        var k = arrPro[i];
        var $form = $(form[k]);
        if ($form.find('[data-fbt-option-change]').length) {
            check = checkBeforeAdd($form);
            if (check == false)
                return false;
        }
    }
    return check;
}

function checkBeforeAdd($attributes) {
    var check = true;
    $attributes.find('input:text, input:password, input:file, textarea').each(function() {

        if ($(this).parents('.productAttributeRow').find('label').find('.required').length == 0) {} else {
            if ($(this).val()) {} else {
                $(this).focus();
                check = false;
            }
        }
    });

    $attributes.find('select').each(function() {
        if ( $(this).parents('.productAttributeRow').find('label').find('.required').length == 0) {

        } else {
            if ($(this).val()) {} else {
                $(this).focus();
                check = false;
            }
        }
    });

    var att = "";
    $attributes.find('input:radio, input:checkbox').each(function() {
        if (att != $(this).attr("name")) {

            att = $(this).attr("name");
            if ($(this).parents('.productAttributeRow').find('label').find('.required').length == 0) {
                if ($(this).attr("type") == "checkbox") {
                    if ($("[name='" + att + "']:checked").val()) {}
                }
                if ($(this).attr("type") == "radio") {
                    if ($("[name='" + att + "']:checked").val()) {}
                }
            } else {
                if ($(this).attr("type") == "checkbox") {
                    if ($("[name='" + att + "']:checked").val()) {} else {
                        check = false;
                    }
                }
                if ($(this).attr("type") == "radio") {
                    if ($("[name='" + att + "']:checked").val()) {} else {
                        check = false;
                    }
                }
            }
        }
    });

    return check;
}

function addToCart(form, i, arrP) {

    if (i >= arrP.length) {
        window.location = '/cart.php';
        return;
    }

    if (window.FormData === undefined) {
        return;
    }
    var k = arrP[i];
    // Add item to cart
    $(form[k]).ajaxSubmit({
        data: {
            fastcart: 1,
            ajaxsubmit: 1
        },
        type: 'post',
        iframe: true,
        dataType: 'json',
        success: function(data) {
            if (data.success) {
                i++;
                if (i >= arrP.length) {
                    window.location = '/cart.php';
                    return;
                }
                addToCart(form, i, arrP);
            }
        }
    });
}

function productOptions() {
    totalPrice();
    const $form = $('form', $(document));

    // var arrPro = new Array();
    for (var i = 0; i < $form.length; i++) {
        const $productOptionsElement = $('[data-fbt-option-change]', $form[i]);
        // apply on page load too incase something is pre-selected
        $productOptionsElement.find(':checked')
                .closest('li')
                    .addClass('selectedValue');

        $productOptionsElement.on('change', event => {
            productOptionsChanged(event);
        });

        $productOptionsElement.delegate('input', 'click', function(event){
            var isSelected = $(this).closest('li').hasClass('selectedValue');
            if(isSelected) {

                // if it's a radio option uncheck it
                $(this).closest('li').parent().find('li' + ' .radio .checked').removeClass('checked');

                // unselect the already selected one and
                // trigger the change event to update out-of-stock status
                $(this).prop('checked', false);
                $(this).change();
            }
            else {
                // change of selection, marked all as unselected
                $(this).closest('li').parent().find('li').removeClass('selectedValue');
            }
            $(this).closest('li').addClass('selectedValue');
        });

    }

}

function productOptionsChanged(event) {
    const $changedOption = $(event.target);
    const $form = $changedOption.parents('form');
    const productId = $('[name="product_id"]', $form).val();

    // Do not trigger an ajax request if it's a file or if the browser doesn't support FormData
    if ($changedOption.attr('type') === 'file' || window.FormData === undefined) {
        return;
    }

    const $checkbox = $('.themvale-fbt-image-item[data-product-id="' + productId + '"]');
    var slide = $( ".themvale-fbt-detail-checkbox" ).index( $checkbox );
    $('.themvale-fbt-image-list').trigger('to.owl.carousel', slide );

    var data = $form.serializeArray();

    data.push({
        name: 'w',
        value: 'getProductAttributeDetails'
    });

    data = $.param(data);

    $.ajax({
        url: '/remote.php',
        type: 'POST',
        dataType: 'json',
        data: data,
        success: function (response) {
            if (response.success && response.details) {
                const productAttributesContent = response.details || {};
                showProductImage(productId, productAttributesContent);
                updateView($form, productAttributesContent);
                totalPrice();
            }
        }
    });
}

function showProductImage(productId, options) {
    if (options.imageRuleId !== undefined && options.image !== undefined && options.thumb !== undefined) {
        // image was supplied and is different from the base image
        $('.themvale-fbt-image-item[data-product-id="' + productId + '"]').find('img').attr({
            'src': options.thumb,
            'data-src': $(this).attr('src'),
        });
    }
    else {
        $('.themvale-fbt-image-item[data-product-id="' + productId + '"]').find('img').attr({
            'src': options.baseThumb,
            'data-src': $(this).attr('src'),
        });
    }
}

function updateView($scope, data) {
    
    updatePriceView($scope, data);
    
    var productId = $('[name="product_id"]', $scope).val();
    
    if (!(data.price !== undefined) || !data.purchasable || !data.instock) {
        $('.themvale-fbt-image-item[data-product-id="' + productId + '"]').removeClass('isChecked');
        $('.themvale-fbt-product-item[data-product-id="' + productId + '"]').removeClass('isChecked');
        $('#fbt_product' + productId).prop('checked', false).prop('disabled', true);
        $('.themvale-fbt-product-item[data-product-id="' + productId + '"]').removeClass('hasOptions--selected');
    } else {
        $('.themvale-fbt-image-item[data-product-id="' + productId + '"]').addClass('isChecked');
        $('.themvale-fbt-product-item[data-product-id="' + productId + '"]').addClass('isChecked');
        $('#fbt_product' + productId).prop('checked', true).prop('disabled', false);

        if ($scope.find('[data-fbt-option-change]').length) {
            var check = checkBeforeAdd($scope);
            if (check == true) {
                $('.themvale-fbt-product-item[data-product-id="' + productId + '"]').addClass('hasOptions--selected');
                $('[data-fbt-option-change]', $scope).slideUp();
            }
        }
    }
}

function updatePriceView($scope, options) {

    // hide/show price - slightly more complex code due to control panel sharing
    $scope.find('.VariationProductPrice').each(function(){
        var $this = $(this);

        if ($this.is('input')) {
            // if the price is an input then set its raw value
            $this.val(options.unformattedPrice === undefined ? '' : options.unformattedPrice);
            return;
        }

        // otherwise use regular hide/show formatted behaviour
        $this.html(options.price === undefined ? '' : options.price)
            .closest('.DetailRow')
                .toggle(options.price !== undefined);
    });

    // price label
    if (options.priceLabel !== undefined) {
        $scope.find('.PriceRow .Label').text(options.priceLabel);
    }

    // hide/show savings
    $scope.find('.YouSaveAmount')
        .text(options.saveAmount === undefined ? '' : options.saveAmount);

    $scope.find('.YouSave, .RetailPrice')
        .toggle(options.saveAmount !== undefined);

    $scope.find('.RetailPrice .Value')
        .html(options.saveAmount === undefined || options.rrp === undefined ? '' : options.rrp);

}

// API
function getById(productId, params, callback) {
    var url = '/remote.php?w=getproductquickview&pid=' + productId;
    var paramsArg = params;
    var callbackArg = callback;

    if (typeof paramsArg === 'function') {
        callbackArg = paramsArg;
        paramsArg = {};
    }

    makeRequest(url, 'GET', paramsArg, false, callbackArg);
}

function makeRequest(url, method, options, remote, callback) {
    request(url, {
        method,
        remote,
        requestOptions: options,
    }, callback);
}

function remoteRequest(endpoint, method, options, callback) {
    const remoteUrl = '/remote.php' + endpoint;

    makeRequest(remoteUrl, method, options, true, callback);
}

function request(url, opts, callback) {
    const defaultOptions = {
        method: 'GET',
        remote: false,
        requestOptions: {
            formData: null,
            params: {},
            config: {},
            template: [],
        },
    };
    const options = Object.assign({}, defaultOptions, opts);
    const data = options.requestOptions.formData ? options.requestOptions.formData : options.requestOptions.params;
    const headers = {
        'stencil-config': options.requestOptions.config ? JSON.stringify(options.requestOptions.config) : '{}',
        'stencil-options': '{}',
    };
    const requestedTemplate = options.requestOptions.template;

    let usingTemplates = false;
    let usingSections = false;
    let templates = [];


    // Not a valid method
    if (!isValidHTTPMethod(options.method)) {
        return callback(new Error('Not a valid HTTP method'));
    }


    if (typeof(requestedTemplate) === 'object' && !Array.isArray(requestedTemplate)) {
        let template;

        usingSections = true;
        templates = [];

        for (template in requestedTemplate) {
            if (requestedTemplate.hasOwnProperty(template)) {
                templates.push(requestedTemplate[template]);
            }
        }
    } else if (typeof(requestedTemplate) === 'string') {
        templates = [requestedTemplate];
    } else if (Array.isArray(requestedTemplate) && requestedTemplate.length > 0) {
        templates = requestedTemplate;
    }

    if (templates.length > 0) {
        usingTemplates = true;

        headers['stencil-options'] = JSON.stringify({
            render_with: templates.join(','),
        });
    }

    // make ajax request using jquery
    $.ajax({
        method: options.method,
        url,
        contentType: options.requestOptions.formData ? false : 'application/x-www-form-urlencoded; charset=UTF-8',
        processData: !options.requestOptions.formData,
        success: (response) => {
            let ret;
            const content = options.remote ? response.content : response;

            if (usingTemplates) {
                // Remove the `components` prefix from the response if it's an object
                if (typeof(content) === 'object') {
                    const keys = Object.keys(content);
                    let key;

                    for (key of keys) {
                        const cleanKey = key.replace(/^template\//, '');

                        content[cleanKey] = content[key];
                        delete(content[key]);
                    }
                }

                // If using "sections", morph the content into the arbitrary keys => content object.
                if (usingSections) {
                    const templateVariableNames = Object.keys(requestedTemplate);
                    let templateVariable;
                    for (templateVariable of templateVariableNames) {
                        content[templateVariable] = content[requestedTemplate[templateVariable]];
                        delete content[requestedTemplate[templateVariable]];
                    }
                }

                if (options.remote) {
                    ret = response;
                    ret.content = content;
                } else {
                    ret = content;
                }
            } else {
                ret = response;
            }

            callback(null, ret);
        },
        error: (XHR, textStatus, err) => {
            callback(err);
        },
        data,
        headers,
    });
}

function isValidHTTPMethod(method) {
    var allowedMethods = ['GET', 'POST', 'PUT', 'DELETE'];

    return allowedMethods.indexOf(method) !== -1;
}